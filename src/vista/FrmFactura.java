/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Color;
import java.awt.Font;
import java.awt.MenuComponent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.ir.BreakNode;
import modelo.*;

/**
 *
 * @author Alexis
 */
public class FrmFactura extends javax.swing.JFrame {
    private int idUsuario = 0;
    private int sesion;
    
    int click = 0;
    String idTemporal = "";
    int cantidadTemporal = 0;
    ArrayList<Producto> listaProductosFactura = new ArrayList<Producto>();
    ArrayList<Producto> listaProductosTabla = new ArrayList<Producto>();
    private FrmLogin miLogin;

    public FrmFactura() {
        initComponents();
        //this.setSize(this.panel_fondo00.getWidth() + 20, this.panel_fondo00.getHeight() + this.jMenuBar1.getHeight() + 50);
        enable(true);
        lb_nombreComprador.setEnabled(false); 
        lb_descripccionCompra.setEnabled(false); 
        txt_nombreComprador.setEnabled(false);
        txtArea_detalleCompra.setEnabled(false);
        this.setLocationRelativeTo(null); 
        tb_productosFactura.getTableHeader().setFont(new Font("SansSerif", Font.PLAIN, 18));
        inicializaTabla(tb_productosFactura);
        String fechaFacturacion = "";
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        fechaFacturacion = (String) dateFormat.format(date);
        this.lb_fechaActual.setText(fechaFacturacion);
        
        addWindowListener(new WindowAdapter(){  
            public void windowClosing(WindowEvent e) {
                dispose();
            }  
        });
    }

    public FrmFactura(int id, int sesion) {
     
        initComponents();
        this.sesion = sesion;
        idUsuario = id;
        
        if (sesion == 0) {
            menuItem_agregarUsuario.setEnabled(false);
            menuItem_modificarUsuario.setEnabled(false);
            menuItem_eliminarUsuario.setEnabled(false);
        } else {
            menuItem_agregarUsuario.setEnabled(true);
            menuItem_modificarUsuario.setEnabled(true);
            menuItem_eliminarUsuario.setEnabled(true);
        }
         
        enable(true);
        this.setEnabled(true);
        lb_nombreComprador.setEnabled(false);
        lb_descripccionCompra.setEnabled(false);
        txt_nombreComprador.setEnabled(false);
        txtArea_detalleCompra.setEnabled(false);
        this.setLocationRelativeTo(null); 
        tb_productosFactura.getTableHeader().setFont(new Font("SansSerif", Font.PLAIN, 18));
        inicializaTabla(tb_productosFactura);
        String fechaFacturacion = "";
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        fechaFacturacion = (String) dateFormat.format(date);
        this.lb_fechaActual.setText(fechaFacturacion);
        lb_idUsuarioActual.setText("" + idUsuario);
        
        addWindowListener(new WindowAdapter(){  
            public void windowClosing(WindowEvent e) {
                dispose();
            }  
        }); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        scroll_tbProductos = new javax.swing.JScrollPane();
        tb_productosFactura = new javax.swing.JTable();
        lb_titulo = new javax.swing.JLabel();
        txt_idFactura = new javax.swing.JTextField();
        lb_idFactura = new javax.swing.JLabel();
        lb_descripccion1 = new javax.swing.JLabel();
        lb_fecha = new javax.swing.JLabel();
        lb_aniadirIDProducto = new javax.swing.JLabel();
        txt_buscarIDProducto = new javax.swing.JTextField();
        btn_EliminarIDProducto = new javax.swing.JButton();
        lb_datosFactura1 = new javax.swing.JLabel();
        lb_datosProdcuto = new javax.swing.JLabel();
        btn_buscarProducto = new javax.swing.JButton();
        lb_productosAniadidosFactura = new javax.swing.JLabel();
        btn_añadirProducto1 = new javax.swing.JButton();
        btn_modificarCantidad = new javax.swing.JButton();
        lb_montoActual = new javax.swing.JLabel();
        lb_titulo_monto = new javax.swing.JLabel();
        btn_GenerarFactura = new javax.swing.JButton();
        lb_OpccionesProductosTabla = new javax.swing.JLabel();
        spinner_CantidadModificar = new javax.swing.JSpinner();
        lb_modificarCantidad1 = new javax.swing.JLabel();
        lb_modificarCantidad2 = new javax.swing.JLabel();
        spinner_cantidadAñadirProducto = new javax.swing.JSpinner();
        lb_idUsuarioActual = new javax.swing.JLabel();
        lb_fechaActual = new javax.swing.JLabel();
        lb_datosConsultados = new javax.swing.JLabel();
        comboBox_elegirTipoFactura = new javax.swing.JComboBox<>();
        txt_nombreComprador = new javax.swing.JTextField();
        lb_descripccionCompra = new javax.swing.JLabel();
        lb_nombreComprador = new javax.swing.JLabel();
        txtArea_detalleCompra = new javax.swing.JTextArea();
        panel_fondo555 = new javax.swing.JPanel();
        panel_fondo2 = new javax.swing.JPanel();
        panel_fondo01 = new javax.swing.JPanel();
        panel_fondo04 = new javax.swing.JPanel();
        panel_05 = new javax.swing.JPanel();
        panel_fondo00 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_Usuarios = new javax.swing.JMenu();
        menuItem_agregarUsuario = new javax.swing.JMenuItem();
        menuItem_modificarUsuario = new javax.swing.JMenuItem();
        menuItem_eliminarUsuario = new javax.swing.JMenuItem();
        menuitem_cerrarSesion = new javax.swing.JMenuItem();
        menuitem_salir = new javax.swing.JMenuItem();
        menu_Facturas = new javax.swing.JMenu();
        menuItem_visualizarFacturas = new javax.swing.JMenuItem();
        menuItem_facturaDetallada = new javax.swing.JMenuItem();
        menu_Productos = new javax.swing.JMenu();
        menuItem_agregarProducto = new javax.swing.JMenuItem();
        menuItem_eliminarProducto = new javax.swing.JMenuItem();
        menuItem_modificarProducto = new javax.swing.JMenuItem();
        menuItem_visualizarProductos = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menú - Creación de Facturas");
        setMaximizedBounds(new java.awt.Rectangle(2147483647, 2147483647, 2147483647, 2147483647));
        setMinimumSize(new java.awt.Dimension(600, 400));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb_productosFactura.setBackground(new java.awt.Color(210, 255, 176));
        tb_productosFactura.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tb_productosFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_productosFactura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tb_productosFacturaFocusGained(evt);
            }
        });
        tb_productosFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_productosFacturaMouseClicked(evt);
            }
        });
        scroll_tbProductos.setViewportView(tb_productosFactura);

        getContentPane().add(scroll_tbProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, 790, 140));

        lb_titulo.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        lb_titulo.setForeground(new java.awt.Color(255, 255, 255));
        lb_titulo.setText("  Creación de facturas");
        getContentPane().add(lb_titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 220, 30));

        txt_idFactura.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txt_idFactura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_idFactura.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txt_idFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_idFacturaActionPerformed(evt);
            }
        });
        getContentPane().add(txt_idFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 190, 35));

        lb_idFactura.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_idFactura.setText("Ingrese el ID de la factura");
        getContentPane().add(lb_idFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 230, 34));

        lb_descripccion1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_descripccion1.setForeground(new java.awt.Color(255, 255, 255));
        lb_descripccion1.setText("ID Usuario");
        getContentPane().add(lb_descripccion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 70, 20));

        lb_fecha.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_fecha.setForeground(new java.awt.Color(255, 255, 255));
        lb_fecha.setText("Fecha");
        getContentPane().add(lb_fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 20, 40, 20));

        lb_aniadirIDProducto.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_aniadirIDProducto.setText("ID Producto");
        getContentPane().add(lb_aniadirIDProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, 34));

        txt_buscarIDProducto.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txt_buscarIDProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_buscarIDProducto.setToolTipText("");
        txt_buscarIDProducto.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(txt_buscarIDProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 120, 186, 35));

        btn_EliminarIDProducto.setBackground(new java.awt.Color(255, 102, 102));
        btn_EliminarIDProducto.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btn_EliminarIDProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imegenes Proyecto/Eliminar basura muy pequeño.png"))); // NOI18N
        btn_EliminarIDProducto.setText("Eliminar");
        btn_EliminarIDProducto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_EliminarIDProducto.setPreferredSize(new java.awt.Dimension(100, 38));
        btn_EliminarIDProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EliminarIDProductoActionPerformed(evt);
            }
        });
        getContentPane().add(btn_EliminarIDProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 560, 100, 35));

        lb_datosFactura1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        lb_datosFactura1.setText("Datos de la Factura");
        getContentPane().add(lb_datosFactura1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 140, 20));

        lb_datosProdcuto.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_datosProdcuto.setText("Datos del producto encontrado");
        getContentPane().add(lb_datosProdcuto, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 180, 20));

        btn_buscarProducto.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btn_buscarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imegenes Proyecto/Buscar lupa muy pequenia.png"))); // NOI18N
        btn_buscarProducto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_buscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarProductoActionPerformed(evt);
            }
        });
        getContentPane().add(btn_buscarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 35, 35));

        lb_productosAniadidosFactura.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        lb_productosAniadidosFactura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imegenes Proyecto/carrito-de-compras muy pequeño.png"))); // NOI18N
        lb_productosAniadidosFactura.setText("Lista de productos");
        getContentPane().add(lb_productosAniadidosFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, -1, 34));

        btn_añadirProducto1.setBackground(new java.awt.Color(226, 241, 255));
        btn_añadirProducto1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btn_añadirProducto1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imegenes Proyecto/añadir carrito muy pequeño.png"))); // NOI18N
        btn_añadirProducto1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_añadirProducto1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_añadirProducto1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_añadirProducto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 160, 38, 35));

        btn_modificarCantidad.setBackground(new java.awt.Color(204, 204, 255));
        btn_modificarCantidad.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btn_modificarCantidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imegenes Proyecto/herrammienta_modificar.png"))); // NOI18N
        btn_modificarCantidad.setText("Modificar");
        btn_modificarCantidad.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_modificarCantidad.setPreferredSize(new java.awt.Dimension(105, 38));
        btn_modificarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarCantidadActionPerformed(evt);
            }
        });
        getContentPane().add(btn_modificarCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 560, 90, 35));

        lb_montoActual.setBackground(new java.awt.Color(204, 255, 204));
        lb_montoActual.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        lb_montoActual.setText("$  0  ");
        getContentPane().add(lb_montoActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 530, 79, 34));

        lb_titulo_monto.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        lb_titulo_monto.setText("Monto:");
        getContentPane().add(lb_titulo_monto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 530, -1, 34));

        btn_GenerarFactura.setBackground(new java.awt.Color(153, 255, 153));
        btn_GenerarFactura.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btn_GenerarFactura.setText("Generar Factura");
        btn_GenerarFactura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_GenerarFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_GenerarFacturaActionPerformed(evt);
            }
        });
        getContentPane().add(btn_GenerarFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 620, 570, 30));

        lb_OpccionesProductosTabla.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        lb_OpccionesProductosTabla.setText("Seleccione una fila para realizar alguna acción");
        lb_OpccionesProductosTabla.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(lb_OpccionesProductosTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 520, 320, 34));

        spinner_CantidadModificar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        spinner_CantidadModificar.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));
        spinner_CantidadModificar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        spinner_CantidadModificar.setPreferredSize(new java.awt.Dimension(40, 25));
        getContentPane().add(spinner_CantidadModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 560, 60, 35));

        lb_modificarCantidad1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_modificarCantidad1.setText("Cantidad");
        getContentPane().add(lb_modificarCantidad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, 50, 20));

        lb_modificarCantidad2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_modificarCantidad2.setText("Cantidad");
        getContentPane().add(lb_modificarCantidad2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 560, 50, 20));

        spinner_cantidadAñadirProducto.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        spinner_cantidadAñadirProducto.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));
        spinner_cantidadAñadirProducto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(spinner_cantidadAñadirProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 50, 35));

        lb_idUsuarioActual.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_idUsuarioActual.setForeground(new java.awt.Color(255, 255, 255));
        lb_idUsuarioActual.setText("1");
        getContentPane().add(lb_idUsuarioActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 40, 20));

        lb_fechaActual.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_fechaActual.setForeground(new java.awt.Color(255, 255, 255));
        lb_fechaActual.setText("1");
        getContentPane().add(lb_fechaActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 100, 20));

        lb_datosConsultados.setBackground(new java.awt.Color(255, 255, 255));
        lb_datosConsultados.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_datosConsultados.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(lb_datosConsultados, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 560, 35));

        comboBox_elegirTipoFactura.setBackground(new java.awt.Color(204, 255, 204));
        comboBox_elegirTipoFactura.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        comboBox_elegirTipoFactura.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Factura normal", "Factura detallada" }));
        comboBox_elegirTipoFactura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        comboBox_elegirTipoFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_elegirTipoFacturaActionPerformed(evt);
            }
        });
        getContentPane().add(comboBox_elegirTipoFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 620, 170, 30));

        txt_nombreComprador.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txt_nombreComprador.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(txt_nombreComprador, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 240, 35));

        lb_descripccionCompra.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_descripccionCompra.setText("Descripcción");
        getContentPane().add(lb_descripccionCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 220, 80, -1));

        lb_nombreComprador.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lb_nombreComprador.setText("Nombre del comprador");
        getContentPane().add(lb_nombreComprador, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 220, 140, -1));

        txtArea_detalleCompra.setColumns(20);
        txtArea_detalleCompra.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtArea_detalleCompra.setRows(5);
        txtArea_detalleCompra.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(txtArea_detalleCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 240, 290, 70));

        panel_fondo555.setBackground(new java.awt.Color(245, 231, 192));
        getContentPane().add(panel_fondo555, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 830, 120));

        panel_fondo2.setBackground(new java.awt.Color(245, 231, 192));
        getContentPane().add(panel_fondo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 830, 260));

        panel_fondo01.setBackground(new java.awt.Color(245, 231, 192));
        getContentPane().add(panel_fondo01, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 830, 120));

        panel_fondo04.setBackground(new java.awt.Color(105, 105, 105));
        panel_fondo04.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        getContentPane().add(panel_fondo04, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 830, 60));

        panel_05.setBackground(new java.awt.Color(245, 231, 192));
        getContentPane().add(panel_05, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 830, 50));

        panel_fondo00.setBackground(new java.awt.Color(189, 189, 188));
        getContentPane().add(panel_fondo00, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 680));

        jMenuBar1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(179, 30));

        menu_Usuarios.setText("Usuario");
        menu_Usuarios.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        menuItem_agregarUsuario.setText("Agregar usuario");
        menuItem_agregarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_agregarUsuarioActionPerformed(evt);
            }
        });
        menu_Usuarios.add(menuItem_agregarUsuario);

        menuItem_modificarUsuario.setText("Modificar usuario");
        menuItem_modificarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_modificarUsuarioActionPerformed(evt);
            }
        });
        menu_Usuarios.add(menuItem_modificarUsuario);

        menuItem_eliminarUsuario.setText("Eliminar usuario");
        menuItem_eliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_eliminarUsuarioActionPerformed(evt);
            }
        });
        menu_Usuarios.add(menuItem_eliminarUsuario);

        menuitem_cerrarSesion.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuitem_cerrarSesion.setText("Cerrar sesión");
        menuitem_cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitem_cerrarSesionActionPerformed(evt);
            }
        });
        menu_Usuarios.add(menuitem_cerrarSesion);

        menuitem_salir.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuitem_salir.setText("Salir");
        menuitem_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitem_salirActionPerformed(evt);
            }
        });
        menu_Usuarios.add(menuitem_salir);

        jMenuBar1.add(menu_Usuarios);

        menu_Facturas.setText("Factura");
        menu_Facturas.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        menuItem_visualizarFacturas.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuItem_visualizarFacturas.setText("Visualizar Facturas");
        menuItem_visualizarFacturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_visualizarFacturasActionPerformed(evt);
            }
        });
        menu_Facturas.add(menuItem_visualizarFacturas);

        menuItem_facturaDetallada.setText("Visualizar Fact. Det.");
        menuItem_facturaDetallada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_facturaDetalladaActionPerformed(evt);
            }
        });
        menu_Facturas.add(menuItem_facturaDetallada);

        jMenuBar1.add(menu_Facturas);

        menu_Productos.setText("Producto");
        menu_Productos.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        menuItem_agregarProducto.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuItem_agregarProducto.setText("Agregar producto");
        menuItem_agregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_agregarProductoActionPerformed(evt);
            }
        });
        menu_Productos.add(menuItem_agregarProducto);

        menuItem_eliminarProducto.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuItem_eliminarProducto.setText("Eliminar producto");
        menuItem_eliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_eliminarProductoActionPerformed(evt);
            }
        });
        menu_Productos.add(menuItem_eliminarProducto);

        menuItem_modificarProducto.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuItem_modificarProducto.setText("Modificar producto");
        menuItem_modificarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_modificarProductoActionPerformed(evt);
            }
        });
        menu_Productos.add(menuItem_modificarProducto);

        menuItem_visualizarProductos.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        menuItem_visualizarProductos.setText("Visualizar productos");
        menuItem_visualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_visualizarProductosActionPerformed(evt);
            }
        });
        menu_Productos.add(menuItem_visualizarProductos);

        jMenuBar1.add(menu_Productos);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_EliminarIDProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EliminarIDProductoActionPerformed
        try {
        tb_productosFactura.getSelectedRow();
        listaProductosFactura.remove(tb_productosFactura.getSelectedRow());
        listaProductosTabla.remove(tb_productosFactura.getSelectedRow());
        efectuarMonto();
        inicializaTabla(tb_productosFactura);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No hay productos seleccionados");
        }
    }//GEN-LAST:event_btn_EliminarIDProductoActionPerformed
    
    public void efectuarMonto(){
        double monto = 0;
        for (int i = 0; i < listaProductosTabla.size(); i++) {
            listaProductosTabla.get(i).calcularMonto();
            monto += listaProductosTabla.get(i).calcularMonto();   
        }  
        lb_montoActual.setText("$   " + monto);    
    }
    
    private void btn_modificarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarCantidadActionPerformed
        try {
            double cantidadIngresada1 = (double) spinner_CantidadModificar.getValue();
            int cantidadIngresada = (int) cantidadIngresada1;
            int indice = tb_productosFactura.getSelectedRow();
            if (listaProductosFactura.get(indice) instanceof Producto) {
                Producto abarroteBase = (Producto) listaProductosFactura.get(indice);
                Producto abarroteCarrito = (Producto) listaProductosTabla.get(indice);

                if (abarroteCarrito.getCantidad() <= abarroteBase.getCantidad()) {
                    abarroteCarrito.setCantidad(cantidadIngresada);
                }
                efectuarMonto();
                inicializaTabla(tb_productosFactura);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No hay productos seleccionados");
        }
    }//GEN-LAST:event_btn_modificarCantidadActionPerformed

    private void btn_GenerarFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_GenerarFacturaActionPerformed
        try {
            int id_Factura = 0;
            String fechaFacturacion = "";
            int id_Usuario = Integer.parseInt(lb_idUsuarioActual.getText().trim());
            String lista_Productos = "";
            double montoTotal = 0;

            Date date = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            id_Factura = Integer.parseInt(this.txt_idFactura.getText());
            fechaFacturacion = (String) dateFormat.format(date);
            this.lb_fechaActual.setText(fechaFacturacion);

            for (int i = 0; i < listaProductosFactura.size(); i++) { //Stock

                if (listaProductosFactura.get(i) instanceof Producto) {
                    // CCONEXION MODIFICAR PRODUCTO
                    Producto abarrotes = (Producto) listaProductosFactura.get(i);
                    Producto abarrotesCarrito = (Producto) listaProductosTabla.get(i);

                    Connection cn3 = DriverManager.getConnection("jdbc:mysql://localhost/bd_punto_de_ventas", "root", "");
                    PreparedStatement pst3 = cn3.prepareStatement("update productos set Cantidad = ? where ID = " + ("" + abarrotes.getId()).trim());

                    pst3.setString(1, ("" + (abarrotes.getCantidad() - abarrotesCarrito.getCantidad())).trim());
                    pst3.executeUpdate();
                    
                    System.out.println(abarrotes.getNombre());
                    System.out.println(abarrotes.calcularMonto());
                    lista_Productos = lista_Productos + "ID: " + abarrotes.getId() + ", Nom: " + abarrotes.getNombre() + ", Prec: " +  abarrotes.getPrecio() + ", Cant: " + abarrotes.getCantidad();
                    montoTotal += listaProductosTabla.get(i).calcularMonto();
                }
                System.out.println(lista_Productos);
                System.out.println(montoTotal);
                lb_montoActual.setText("$   " + montoTotal);
            }
            
            if(comboBox_elegirTipoFactura.getSelectedIndex() == 0){
               FacturaNormal facturaNormal = new FacturaNormal(id_Factura, fechaFacturacion, id_Usuario, lista_Productos, montoTotal);
               facturaNormal.generarFactura();
               JOptionPane.showMessageDialog(null, "Generación exitosa!");
            }else if(comboBox_elegirTipoFactura.getSelectedIndex() == 1){
               String nombreComprador = txt_nombreComprador.getText().trim();
               String detallesCompra = txtArea_detalleCompra.getText().trim();
               FacturaDetallada facturaDetallada = new FacturaDetallada(id_Factura, fechaFacturacion, id_Usuario, lista_Productos, montoTotal, nombreComprador, detallesCompra);
               facturaDetallada.generarFactura();
               FacturaPDF tabla = new FacturaPDF();
               tabla.generarFacturaDetallada(listaProductosTabla, facturaDetallada);
               JOptionPane.showMessageDialog(null, "Generación exitosa!"); 
            }
            
            this.txtArea_detalleCompra.setText("");
            this.txt_buscarIDProducto.setText("");
            this.txt_idFactura.setText("");
            this.txt_nombreComprador.setText("");
            listaProductosFactura.clear();
            listaProductosTabla.clear();
            tb_productosFactura.clearSelection();
            lb_montoActual.setText("");
 
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, "No se pudo tener acceso a la base de datos");
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Algun campo/os es inscorrecto");
        }
    }//GEN-LAST:event_btn_GenerarFacturaActionPerformed

    public void agregarDatosBase(FacturaNormal factura) {
        try {
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/bd_punto_de_ventas", "root", "");
            PreparedStatement pst = cn.prepareStatement("insert into facturas values(?,?,?,?,?)");

            String idFactura = "" + factura.getId();
            String fechaFact = factura.getFechaFactura();
            String idUsuario = "" + factura.getIdUsuario();
            String listaProductos = factura.getListaProductos();
            String montoTot = "" + factura.getMontoTotal();

            pst.setString(1, idFactura.trim());
            pst.setString(2, fechaFact.trim());
            pst.setString(3, idUsuario.trim());
            pst.setString(4, listaProductos.trim());
            pst.setString(5, montoTot.trim());
            pst.executeUpdate();

            //JOptionPane.showMessageDialog(null, "Facturacion exitosa");
            this.lb_datosConsultados.setText("");
            this.spinner_cantidadAñadirProducto.setValue(0); 
            this.txt_buscarIDProducto.setText("");

        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, "No se pudo tener acceso a la base de datos");
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo efectuar la creacion de la factura...\n"
                    + "Existe algun/algunos campos invalido...");
        }
    }    
    
    private void btn_añadirProducto1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_añadirProducto1ActionPerformed
       try {
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/bd_punto_de_ventas", "root", "");
            PreparedStatement pst = cn.prepareStatement("select * from productos where ID = ?");
            pst.setString(1, this.idTemporal.trim());
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                int cantidadProducto = 0;
                cantidadProducto = Integer.parseInt(rs.getString("Cantidad"));
                int cantidadIngresada = 0;
                cantidadIngresada = (int) spinner_cantidadAñadirProducto.getValue();

                if (cantidadIngresada < 0) {
                    cantidadIngresada = cantidadIngresada * (-1);
                }
                int cantidadModificada = 0;
                cantidadModificada = cantidadProducto - cantidadIngresada;

                if (cantidadModificada < 0) {
                    JOptionPane.showMessageDialog(null, "La cantidad ingresada no es valida");
                } else {
                    int idProducto1 = Integer.parseInt(rs.getString("ID"));
                    String nombreProducto1 = rs.getString("NombreProducto");
                    double precioProducto1 = Double.parseDouble(rs.getString("Precio"));
                    String tipoContenido1 = rs.getString("TipoContenido");
                    Producto abarrotesNuevo = new Producto(idProducto1, nombreProducto1, precioProducto1, cantidadProducto, tipoContenido1); // Stock
                    Producto abarrotesTabla = new Producto(idProducto1, nombreProducto1, precioProducto1, cantidadIngresada, tipoContenido1); // Carrito
                    listaProductosFactura.add(abarrotesNuevo);
                    listaProductosTabla.add(abarrotesTabla);
                    System.out.println(idProducto1 + " " + nombreProducto1 + " " + precioProducto1 + " " + cantidadModificada);

                    this.idTemporal = "";
                    this.cantidadTemporal = 0;
                    this.txt_buscarIDProducto.setText("");
                    efectuarMonto();
                    inicializaTabla(tb_productosFactura);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo añadir el producto a la factura!");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "No se pudo tener acceso a la base de datos");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "El ID del producto no es válido!");
        }
    }//GEN-LAST:event_btn_añadirProducto1ActionPerformed

    public void inicializaTabla(JTable tabla) {
        Vector<String> titulos = new Vector<String>();
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        titulos.add("ID");
        titulos.add("Nombre Producto");
        titulos.add("Precio");
        titulos.add("Cantidad");
        titulos.add("Tipo contenido");
        for (int i = 0; i < listaProductosTabla.size(); i++) {
            Vector<Object> row = new Vector<Object>();
            if (listaProductosTabla.get(i) instanceof Producto) {
                Producto abarrotes = (Producto) listaProductosTabla.get(i);
                row.add(abarrotes.getId());
                row.add(abarrotes.getNombre());
                row.add(abarrotes.getPrecio());
                row.add(abarrotes.getCantidad());
                row.add(abarrotes.getContenidoNeto());
            }
            data.add(row);//Metomos los datos en data(la lista), es decir, la matriz de datos para la tabla
        }
        DefaultTableModel modelo = new DefaultTableModel(data, titulos); //Añadiendo los datos recolectados al FrmTbEmpleado
        tabla.setModel(modelo);
    }

    private void btn_buscarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarProductoActionPerformed
   try {
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/bd_punto_de_ventas", "root", "");
            PreparedStatement pst = cn.prepareStatement("select * from productos where ID = ?");
            pst.setString(1, this.txt_buscarIDProducto.getText().trim());
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                String datosProducto = "";
                datosProducto = "  ID: " + rs.getString("ID") + "\n,   Nombre: " + rs.getString("NombreProducto") + ",   Precio: $ " + rs.getString("Precio")
                        + ",   Cantidad: " + rs.getString("Cantidad") + ",   Tipo contenido: " + rs.getString("TipoContenido");
                this.lb_datosConsultados.setText(datosProducto);
                
                this.idTemporal = rs.getString("ID");
                //this.txt_datosProducto.setText("" + datosProducto);   
            } else {
                //JOptionPane.showMessageDialog(null, "Producto no encontrado");
                throw new ConsultaNoValidaException("No se encontró el ID del producto!");
                
            }
            
            if(existeProducto(Integer.parseInt(rs.getString("ID").trim()))){
                throw new ExcepcionProductoExistente("El producto encontrado ya existe en la factura en curso");
            }else{           
            SpinnerModel value = new SpinnerNumberModel(1, 1, Integer.parseInt(rs.getString("Cantidad").trim()), 1);
            spinner_cantidadAñadirProducto.setModel(value);  
            }
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, "No se pudo tener acceso a la base de datos");
        }catch (ExcepcionProductoExistente e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }catch (ConsultaNoValidaException e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Entrada de ID no valida");
        }

    }//GEN-LAST:event_btn_buscarProductoActionPerformed
   
    public boolean existeProducto(int ID) {
            for (int i = 0; i < listaProductosTabla.size(); i++) {
                if (listaProductosTabla.get(i) instanceof Producto) {
                    Producto nuevo = (Producto) listaProductosTabla.get(i);
                    Producto nuevo2 = (Producto) listaProductosFactura.get(i);
                    if (ID == nuevo.getId()) {
                        double cantidad = nuevo2.getCantidad() - nuevo.getCantidad();
                        SpinnerModel value = new SpinnerNumberModel(1, 1, cantidad, 1);
                        spinner_cantidadAñadirProducto.setModel(value);
                        return true;
                    }
                }
            }
            return false;
        } 
    
    private void txt_idFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_idFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_idFacturaActionPerformed

    private void menuItem_eliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_eliminarProductoActionPerformed
        FrmEliminarProducto frmEliminarProducto = new FrmEliminarProducto(idUsuario, sesion);
        frmEliminarProducto.setVisible(true);
        dispose();
    }//GEN-LAST:event_menuItem_eliminarProductoActionPerformed

    private void menuItem_modificarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_modificarProductoActionPerformed
        FrmModificarProducto frmModificarProducto = new FrmModificarProducto(idUsuario, sesion);
        frmModificarProducto.setVisible(true);
        dispose();
    }//GEN-LAST:event_menuItem_modificarProductoActionPerformed

    private void menuitem_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitem_salirActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuitem_salirActionPerformed

    private void menuitem_cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitem_cerrarSesionActionPerformed
        FrmLogin login = new FrmLogin();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuitem_cerrarSesionActionPerformed

    private void menuItem_visualizarFacturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_visualizarFacturasActionPerformed
        int idFact = idUsuario;
        FrmVisualizarFacturas frmFacturas = new FrmVisualizarFacturas(idFact, sesion);
        frmFacturas.setVisible(true);
        dispose();
        
    }//GEN-LAST:event_menuItem_visualizarFacturasActionPerformed

    private void menuItem_agregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_agregarProductoActionPerformed
        FrmAgregarProducto frmAgregarProducto = new FrmAgregarProducto(idUsuario, sesion);
        frmAgregarProducto.setVisible(true);
        dispose();
    }//GEN-LAST:event_menuItem_agregarProductoActionPerformed

    private void menuItem_visualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_visualizarProductosActionPerformed
        FrmVisualizarProductos frmVisualizarProductos = new FrmVisualizarProductos(idUsuario, sesion);
        frmVisualizarProductos.setVisible(true);
        dispose();
    }//GEN-LAST:event_menuItem_visualizarProductosActionPerformed

    private void comboBox_elegirTipoFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_elegirTipoFacturaActionPerformed
        int opccionSeleccionada = this.comboBox_elegirTipoFactura.getSelectedIndex();
        if (opccionSeleccionada == 0) {
            lb_nombreComprador.setEnabled(false);
            lb_descripccionCompra.setEnabled(false);
            txt_nombreComprador.setEnabled(false);
            txtArea_detalleCompra.setEnabled(false);
        } else if (opccionSeleccionada == 1) {
            lb_nombreComprador.setEnabled(true);
            lb_descripccionCompra.setEnabled(true);
            txt_nombreComprador.setEnabled(true);
            txtArea_detalleCompra.setEnabled(true);
            txtArea_detalleCompra.setEnabled(true);
        }
    }//GEN-LAST:event_comboBox_elegirTipoFacturaActionPerformed

    private void menuItem_eliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_eliminarUsuarioActionPerformed
        if (sesion == 0) {
              menuItem_eliminarUsuario.setEnabled(false);
        } else {
            menuItem_eliminarUsuario.setEnabled(true);
            FrmEliminarUsuario frmEliminarUsuario = new FrmEliminarUsuario(idUsuario, sesion);
            frmEliminarUsuario.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_menuItem_eliminarUsuarioActionPerformed

    private void tb_productosFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_productosFacturaMouseClicked
        try {
            if (listaProductosTabla.get(tb_productosFactura.getSelectedRow()) instanceof Producto) {
                Producto abarrotes = (Producto) listaProductosTabla.get(tb_productosFactura.getSelectedRow());
                Producto abarrotesStock = (Producto) listaProductosFactura.get(tb_productosFactura.getSelectedRow());
                SpinnerModel value = new SpinnerNumberModel(abarrotes.getCantidad(), 1, abarrotesStock.getCantidad(), 1);
                spinner_CantidadModificar.setModel(value);
            }
        } catch (IndexOutOfBoundsException e) {
        }
    }//GEN-LAST:event_tb_productosFacturaMouseClicked

    private void tb_productosFacturaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tb_productosFacturaFocusGained

    }//GEN-LAST:event_tb_productosFacturaFocusGained

    private void menuItem_facturaDetalladaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_facturaDetalladaActionPerformed

        FrmVisualizarFacturaDetallada frmVisualizarFacturaDetallada = new FrmVisualizarFacturaDetallada(idUsuario, sesion);
        frmVisualizarFacturaDetallada.setVisible(true);
        dispose();
    }//GEN-LAST:event_menuItem_facturaDetalladaActionPerformed

    private void menuItem_agregarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_agregarUsuarioActionPerformed
        if (sesion == 0) {
            menuItem_agregarUsuario.setEnabled(false);
        } else {
            menuItem_agregarUsuario.setEnabled(true);
            FrmAgregarUsuario frmAgregarUsuario = new FrmAgregarUsuario(idUsuario, sesion);
            frmAgregarUsuario.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_menuItem_agregarUsuarioActionPerformed

    private void menuItem_modificarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_modificarUsuarioActionPerformed
        if (sesion == 0) {
            menuItem_modificarUsuario.setEnabled(false);
        } else {
            menuItem_modificarUsuario.setEnabled(true);
            FrmModificarUsuario frmModificarUsuario = new FrmModificarUsuario(idUsuario, sesion);
            frmModificarUsuario.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_menuItem_modificarUsuarioActionPerformed

 

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFactura().setVisible(true);
               
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_EliminarIDProducto;
    private javax.swing.JButton btn_GenerarFactura;
    private javax.swing.JButton btn_añadirProducto1;
    private javax.swing.JButton btn_buscarProducto;
    private javax.swing.JButton btn_modificarCantidad;
    private javax.swing.JComboBox<String> comboBox_elegirTipoFactura;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JLabel lb_OpccionesProductosTabla;
    private javax.swing.JLabel lb_aniadirIDProducto;
    private javax.swing.JLabel lb_datosConsultados;
    private javax.swing.JLabel lb_datosFactura1;
    private javax.swing.JLabel lb_datosProdcuto;
    private javax.swing.JLabel lb_descripccion1;
    private javax.swing.JLabel lb_descripccionCompra;
    private javax.swing.JLabel lb_fecha;
    private javax.swing.JLabel lb_fechaActual;
    private javax.swing.JLabel lb_idFactura;
    private javax.swing.JLabel lb_idUsuarioActual;
    private javax.swing.JLabel lb_modificarCantidad1;
    private javax.swing.JLabel lb_modificarCantidad2;
    private javax.swing.JLabel lb_montoActual;
    private javax.swing.JLabel lb_nombreComprador;
    private javax.swing.JLabel lb_productosAniadidosFactura;
    private javax.swing.JLabel lb_titulo;
    private javax.swing.JLabel lb_titulo_monto;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JMenuItem menuItem_agregarProducto;
    private javax.swing.JMenuItem menuItem_agregarUsuario;
    private javax.swing.JMenuItem menuItem_eliminarProducto;
    private javax.swing.JMenuItem menuItem_eliminarUsuario;
    private javax.swing.JMenuItem menuItem_facturaDetallada;
    private javax.swing.JMenuItem menuItem_modificarProducto;
    private javax.swing.JMenuItem menuItem_modificarUsuario;
    private javax.swing.JMenuItem menuItem_visualizarFacturas;
    private javax.swing.JMenuItem menuItem_visualizarProductos;
    private javax.swing.JMenu menu_Facturas;
    private javax.swing.JMenu menu_Productos;
    private javax.swing.JMenu menu_Usuarios;
    private javax.swing.JMenuItem menuitem_cerrarSesion;
    private javax.swing.JMenuItem menuitem_salir;
    private javax.swing.JPanel panel_05;
    private javax.swing.JPanel panel_fondo00;
    private javax.swing.JPanel panel_fondo01;
    private javax.swing.JPanel panel_fondo04;
    private javax.swing.JPanel panel_fondo2;
    private javax.swing.JPanel panel_fondo555;
    private javax.swing.JScrollPane scroll_tbProductos;
    private javax.swing.JSpinner spinner_CantidadModificar;
    private javax.swing.JSpinner spinner_cantidadAñadirProducto;
    private javax.swing.JTable tb_productosFactura;
    private javax.swing.JTextArea txtArea_detalleCompra;
    private javax.swing.JTextField txt_buscarIDProducto;
    private javax.swing.JTextField txt_idFactura;
    private javax.swing.JTextField txt_nombreComprador;
    // End of variables declaration//GEN-END:variables
}
